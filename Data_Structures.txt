Went through Stacks, arrays and Queues for the weekend.
Will start CTCI nect weekend.

Question 1 (Panagram):  Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma, "every letter") is a sentence using every letter of the alphabet at least once. E.g. "The quick brown fox jumps over the lazy dog" is a panagram
# Test:is_pangram("the quick brown fox jumps over the lazy dog") == True,
#   is_pangram("a quick movement of the enemy will jeopardize five gunboats") == False,
#   is_pangram('"Five quacking Zephyrs jolt my wax bed."') == True,
#   is_pangram("bcdefghijklmnopqrstuvwxyz") == False

def is_pangram(sentence) :

  sentence = sentence.lower()

  for letter in 'abcdefghijklmnopqrstuvwxyz' :
    if letter not in sentence :
      return False
  return True


# Question 3 (Leap Year): Given a year, report if it is a leap year.
# Tips: on every year that is evenly divisible by 4, except every year that is evenly divisible by 100, unless the year is also evenly divisible by 400
# For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is.
# Test:(leap_year(2015) == False
# (leap_year(1996) == True
# (leap_year(1800) == False
# (leap_year(2000) == True


def leaf_year(year) :
  if year % 4 and (year % 400 != 0 or year % 100 == 0):
    return True
  return False


####Linked Lists

Linked lists are an ordered collection of objects. So what makes them different from normal lists?
Linked lists differ from lists in the way that they store elements in memory
Each element of a linked list is called a node, and every node has two different fields

Data contains the value to be stored in the node.
Next contains a reference to the next node on the list.

A linked list is a collection of nodes. The first node is called the head, and it’s used as the starting point for any iteration through the list.
The last node must have its next reference pointing to None to determine the end of the list

Linked lists serve a variety of purposes in the real world. They can be used to implement (spoiler alert!) queues or stacks as well as graphs.
They’re also useful for much more complex tasks, such as lifecycle management for an operating system application.

def __init__(self, nodes=None):
    self.head = None
    if nodes is not None:
        node = Node(data=nodes.pop(0))
        self.head = node
        for elem in nodes:
            node.next = Node(data=elem)
            node = node.next

Until now, you’ve been learning about a specific type of linked list called singly-linked lists.
But there are more types of linked lists that can be used for slightly different purposes.
How to Use Doubly Linked Lists
Doubly linked lists are different from singly linked lists in that they have two references:
The previous field references the previous node.
The next field references the next node.
How to Use Circular Linked Lists
Circular linked lists are a type of linked list in which the last node points back to the head of the list instead of pointing to None. This is what makes them circular.
Circular linked lists have quite a few interesting use cases:
Going around each player’s turn in a multiplayer game
Managing the application life cycle of a given operating system
Implementing a Fibonacci heap


Linked lists, on the other hand, are much more straightforward when it comes to the insertion and deletion of elements at the beginning or end of a list, where their time complexity is always constant: O(1)

For this reason, linked lists have a performance advantage over normal lists when implementing a queue (FIFO), in which elements are continuously inserted and removed at the beginning of the list.
But they perform similarly to a list when implementing a stack (LIFO), in which elements are inserted and removed at the end of the list.

Retrieval of Elements
When it comes to element lookup, lists perform much better than linked lists. When you know which element you want to access, lists can perform this operation in O(1) time.
Trying to do the same with a linked list would take O(n) because you need to traverse the whole list to find the element.

When searching for a specific element, however, both lists and linked lists perform very similarly, with a time complexity of O(n).
In both cases, you need to iterate through the entire list to find the element you’re looking for