Went through Stacks, arrays and Queues for the weekend.
Will start CTCI nect weekend.

Question 1 (Panagram):  Determine if a sentence is a pangram. A pangram (Greek: παν γράμμα, pan gramma, "every letter") is a sentence using every letter of the alphabet at least once. E.g. "The quick brown fox jumps over the lazy dog" is a panagram
# Test:is_pangram("the quick brown fox jumps over the lazy dog") == True,
#   is_pangram("a quick movement of the enemy will jeopardize five gunboats") == False,
#   is_pangram('"Five quacking Zephyrs jolt my wax bed."') == True,
#   is_pangram("bcdefghijklmnopqrstuvwxyz") == False

def is_pangram(sentence) :

  sentence = sentence.lower()

  for letter in 'abcdefghijklmnopqrstuvwxyz' :
    if letter not in sentence :
      return False
  return True


# Question 3 (Leap Year): Given a year, report if it is a leap year.
# Tips: on every year that is evenly divisible by 4, except every year that is evenly divisible by 100, unless the year is also evenly divisible by 400
# For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is.
# Test:(leap_year(2015) == False
# (leap_year(1996) == True
# (leap_year(1800) == False
# (leap_year(2000) == True


def leaf_year(year) :
  if year % 4 and (year % 400 != 0 or year % 100 == 0):
    return True
  return False


####Linked Lists

Linked lists are an ordered collection of objects. So what makes them different from normal lists?
Linked lists differ from lists in the way that they store elements in memory
Each element of a linked list is called a node, and every node has two different fields

Data contains the value to be stored in the node.
Next contains a reference to the next node on the list.

A linked list is a collection of nodes. The first node is called the head, and it’s used as the starting point for any iteration through the list.
The last node must have its next reference pointing to None to determine the end of the list

Linked lists serve a variety of purposes in the real world. They can be used to implement (spoiler alert!) queues or stacks as well as graphs.
They’re also useful for much more complex tasks, such as lifecycle management for an operating system application.

def __init__(self, nodes=None):
    self.head = None
    if nodes is not None:
        node = Node(data=nodes.pop(0))
        self.head = node
        for elem in nodes:
            node.next = Node(data=elem)
            node = node.next

Until now, you’ve been learning about a specific type of linked list called singly-linked lists.
But there are more types of linked lists that can be used for slightly different purposes.
How to Use Doubly Linked Lists
Doubly linked lists are different from singly linked lists in that they have two references:
The previous field references the previous node.
The next field references the next node.
How to Use Circular Linked Lists
Circular linked lists are a type of linked list in which the last node points back to the head of the list instead of pointing to None. This is what makes them circular.
Circular linked lists have quite a few interesting use cases:
Going around each player’s turn in a multiplayer game
Managing the application life cycle of a given operating system
Implementing a Fibonacci heap


Linked lists, on the other hand, are much more straightforward when it comes to the insertion and deletion of elements at the beginning or end of a list, where their time complexity is always constant: O(1)

For this reason, linked lists have a performance advantage over normal lists when implementing a queue (FIFO), in which elements are continuously inserted and removed at the beginning of the list.
But they perform similarly to a list when implementing a stack (LIFO), in which elements are inserted and removed at the end of the list.

Retrieval of Elements
When it comes to element lookup, lists perform much better than linked lists. When you know which element you want to access, lists can perform this operation in O(1) time.
Trying to do the same with a linked list would take O(n) because you need to traverse the whole list to find the element.

When searching for a specific element, however, both lists and linked lists perform very similarly, with a time complexity of O(n).
In both cases, you need to iterate through the entire list to find the element you’re looking for.

Time Complexity :
*Access O(n)
*Search O(n)
*Insert O(1)
*Remove O(1)


#Saturday:
Today,I will be focusing on Stacks and Queues

A stack is a collection of elements with two key operations : push which adds to a collection and pop which removes
the last recent element.

It operates based on LIFO
Like Pringles

Time Complexity:
*Access: O(n)
*Search: O(n)
*Insert: O(1)
*Remove: O(1)

Queues

A queue is a collection of elements that has two operations like Stacks. For queues, we enqueue to add to an element
to a queue and dequeue to remove from a queue.
It operates on the FIFO principle. Like queueing in a banking hall

Time Complexity:
*Access: O(n)
*Search: O(n)
*Insert: O(1)
*Remove: O(1)


#Trees

A Tree is an undirected, connected, acyclic graph

Binary Tree
A Binary Tree is a tree data structure in which each node has at most two children, which are referred to as the left child and right child
Full Tree: a tree in which every node has either 0 or 2 children
Perfect Binary Tree: a binary tree in which all interior nodes have two children and all leave have the same depth
Complete Tree: a binary tree in which every level except possibly the last is full and all nodes in the last level are as far left as possible

Binary Search Tree
A binary search tree, sometimes called BST, is a type of binary tree which maintains the property that the value in each node must be greater than or equal to any value stored in the left sub-tree, and less than or equal to any value stored in the right sub-tree
Time Complexity:
Access: O(log(n))
Search: O(log(n))
Insert: O(log(n))
Remove: O(log(n))

Trie
A trie, sometimes called a radix or prefix tree, is a kind of search tree that is used to store a dynamic set or associative array where the keys are usually Strings. No node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common prefix of the String associated with that node,
and the root is associated with the empty String.

Fenwick Tree
A Fenwick tree, sometimes called a binary indexed tree, is a tree in concept, but in practice is implemented as an implicit data structure using an array. Given an index in the array representing a vertex, the index of a vertex's parent or child is calculated through bitwise operations on the binary representation of its index. Each element of the array contains the pre-calculated sum of a range of values, and by combining that sum with additional ranges encountered during an upward traversal to the root, the prefix sum is calculated
Time Complexity:
Range Sum: O(log(n))
Update: O(log(n))

Segment Tree
A Segment tree, is a tree data structure for storing intervals, or segments. It allows querying which of the stored segments contain a given point
Time Complexity:
Range Query: O(log(n))
Update: O(log(n))

Heap
A Heap is a specialized tree based structure data structure that satisfies the heap property: if A is a parent node of B, then the key (the value) of node A is ordered with respect to the key of node B with the same ordering applying across the entire heap. A heap can be classified further as either a "max heap" or a "min heap". In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node
Time Complexity:
Access Max / Min: O(1)
Insert: O(log(n))
Remove Max / Min: O(log(n))


Hashing
Hashing is used to map data of an arbitrary size to data of a fixed size. The values returned by a hash function are called hash values, hash codes, or simply hashes. If two keys map to the same value, a collision occurs
Hash Map: a hash map is a structure that can map keys to values. A hash map uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.
Collision Resolution
Separate Chaining: in separate chaining, each bucket is independent, and contains a list of entries for each index. The time for hash map operations is the time to find the bucket (constant time), plus the time to iterate through the list
Open Addressing: in open addressing, when a new entry is inserted, the buckets are examined, starting with the hashed-to-slot and proceeding in some sequence, until an unoccupied slot is found. The name open addressing refers to the fact that the location of an item is not always determined by its hash value

Graph
A Graph is an ordered pair of G = (V, E) comprising a set V of vertices or nodes together with a set E of edges or arcs, which are 2-element subsets of V (i.e. an edge is associated with two vertices, and that association takes the form of the unordered pair comprising those two vertices)
Undirected Graph: a graph in which the adjacency relation is symmetric. So if there exists an edge from node u to node v (u -> v), then it is also the case that there exists an edge from node v to node u (v -> u)
Directed Graph: a graph in which the adjacency relation is not symmetric. So if there exists an edge from node u to node v (u -> v), this does not imply that there exists an edge from node v to node u (v -> u)


#Algos

Sorting
Quicksort
Stable: No
Time Complexity:
Best Case: O(nlog(n))
Worst Case: O(n^2)
Average Case: O(nlog(n))