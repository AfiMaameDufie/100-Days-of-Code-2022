/*

Comments  : // , /**/

/*
Variables : var afi;
assignment operators : var a = 5 ;
String operators : var myName = "afi";

assignment operators, multi assignment, use of let, var and const

multioperator assignment and ctci

concatenation operator
newline, new tab 
bracket notation
arrays

nested arrays
bracket notation
array manipulation

shift
unshift
lists
functions and scoping

boolean
conditional statements
equality operator

more equality operators
conditional statements

golf code
switch statements

function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
  switch(val) {
  case 1:
  case 2:
  case 3:
    answer = "Low";
    break;
  case 4:
  case 5:
  case 6:
    answer = "Mid";
    break;
  case 7:
  case 8:
  case 9:
    answer = "High";
    break;
  
}


  // Only change code above this line
  return answer;
}

sequentialSizes(1);


function isLess(a, b) {
  // Only change code below this line
  return a < b;
  // Only change code above this line
}

isLess(10, 15);

function abTest(a, b) {
  if (a < 0 | b < 0) {
    return undefined;
  }

  // Only change code below this linee

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);


Counting cards
let count = 0;

function cc(card) {
  // Only change code below this line
  switch (card) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 10:
    case "J":
    case "Q":
    case "K":
    case "A":
      count--;
      break;
  }
  if (count > 0) {
    return count + " Bet";
  } else {
    return count + " Hold";
  }
}


const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

const hatValue = testObj.hat;      
const shirtValue = testObj.shirt;

const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
var entreeValue = testObj["an entree"];   
var drinkValue = testObj["the drink"];  


const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line
myDog.name="Happy Coder";


function phoneticLookup(val) {
  let result = "";

  // Only change code below this line
  var lookup = {
    "alpha" : "Adams",
    "bravo": "Boston",
    "charlie" : "Chicago",
    "delta" : "Denver",
    "echo" : "Easy",
    "foxtrot" : "Frank"
  };

 result = lookup[val];

  return result;
}

phoneticLookup("charlie");


function checkObj(obj, checkProp) {
 if(obj.hasOwnProperty(checkProp)){
    return obj[checkProp];
  }
  else{
return "Not Found";
  }
}

const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1] ;

const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  if (value === '') {
    delete records[id][prop];
  } else if (prop === 'tracks') {
    records[id][prop] = records[id][prop] || []; // this is called shortcircuit evaluation, see below for explanation
    records[id][prop].push(value);
  } else {
    records[id][prop] = value;
  }
  return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

const ourArray = [];

for (let i = 10; i > 0; i -= 2) {
  ourArray.push(i);
}

const arr = [10, 9, 8, 7, 6];

for (let i = 0; i < arr.length; i++) {
   console.log(arr[i]);
}

// Setup
const myArr = [2, 3, 4, 5, 6];
var total = 0;
// Only change code below this line

for (let n = 0; n < myArr.length; n++) {
  total += myArr[n];
}

function multiplyAll(arr) {
  let product = 1;
  // Only change code below this line
   for (let i = 0; i < arr.length; i++) {
     for (let j = 0; j < arr[i].length; j++) {
       product = product * arr[i][j];
     }
   }
  // Only change code above this line
  return product;
}

multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);

// Setup
const myArray = [];
let i = 10;

do {
  myArray.push(i);
  i++;
  console.log(myArray)
} while (i < 10);

function sum(arr, n) {
  if (n <= 0) {
    return 0;
  } else {
    return sum(arr, n - 1) + (arr[n - 1]); 
  }
  // Only change code above this line
}

const contacts = [
  {
    firstName: "Akira",
    lastName: "Laine",
    number: "0543236543",
    likes: ["Pizza", "Coding", "Brownie Points"],
  },
  {
    firstName: "Harry",
    lastName: "Potter",
    number: "0994372684",
    likes: ["Hogwarts", "Magic", "Hagrid"],
  },
  {
    firstName: "Sherlock",
    lastName: "Holmes",
    number: "0487345643",
    likes: ["Intriguing Cases", "Violin"],
  },
  {
    firstName: "Kristian",
    lastName: "Vos",
    number: "unknown",
    likes: ["JavaScript", "Gaming", "Foxes"],
  },
];

function lookUpProfile(name, prop) {
  for (let i = 0; i < contacts.length; i++) {
    if (contacts[i].firstName === name) {
      if (prop in contacts[i]) {
        return contacts[i][prop];
      } else {
        return "No such property";
      }
    }
  }
return "No such contact";

}

function randomFraction() {

  // Only change code below this line

  return Math.random();

  // Only change code above this line
}

function randomWholeNum() {

  // Only change code below this line
 
  return Math.floor(Math.random()* 10);
}

function randomRange(myMin, myMax) {
  // Only change code below this line
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
 
}

function convertToInteger(str) {
  return parseInt(str);

}

convertToInteger("56");

function convertToInteger(str) {
  return parseInt(str, 2);
}

convertToInteger("10011");

function checkEqual(a, b) {
  return a == b ? "Equal" : "Not Equal";

}

checkEqual(1, 2);

function checkSign(num) {
  return (num == 0) ? "zero" : (num < 0) ? "negative" : "positive";

}

checkSign(10);


// Only change code below this line
function countdown(n){
  if (n < 1) {
    return [];
  } else {
    const countArray = countdown(n - 1);
    countArray.unshift(n);
    return countArray;
  }

}

function rangeOfNumbers(startNum, endNum) {
  if (startNum === endNum) {
    return [startNum];
  } else {
    var nums = rangeOfNumbers(startNum, endNum - 1);
    nums.push(endNum);
    return nums;
  }

};


function checkScope() {
  let i = 'function scope';
  if (true) {
    let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}

const s = [5, 7, 2];
function editInPlace() {
  s[0] = 2;
  s[1] = 5;
  s[2] = 7;
}
editInPlace();

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
Object.freeze(MATH_CONSTANTS);
 
  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();



 
const magic = () => {
  return new Date();
}


const myConcat = (arr1, arr2) => arr1.concat(arr2);
 
console.log(myConcat([1, 2], [3, 4, 5]));



// Only change code below this line
const increment = (number, value = 1) => number + value;



const sum = (...args) => {
  return args.reduce((a, b) => a + b, 0);
}



const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
 
arr2 = [...arr1];  // Change this line
 
console.log(arr2);


const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line
const {tomorrow} = HIGH_TEMPERATURES;
const {today} = HIGH_TEMPERATURES;
// Only change code above this line


const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// Only change code below this line
  
const {today: highToday} = HIGH_TEMPERATURES;
const {tomorrow: highTomorrow} = HIGH_TEMPERATURES; 

// Only change code above this line

const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};

// Only change code below this line
  
const {today:{low:lowToday}} = LOCAL_FORECAST;
const {today:{high:highToday}} = LOCAL_FORECAST;

// Only change code above this line

let a = 8, b = 6;
// Only change code below this line
[a,b] =[b,a];

const source = [1,2,3,4,5,6,7,8,9,10];
function removeFirstTwo(list) {
  // Only change code below this line
  const [a, b, ...arr] = list; // Change this line

  // Only change code above this line
  return arr;
}
const arr = removeFirstTwo(source);

const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};

// Only change code below this line
const half = ({min, max}) => (max + min) / 2.0; 

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // Only change code below this line
  const failureItems = [];
  for(let i=0; i < arr.length; i++) {
    failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
  }
  // Only change code above this line

  return failureItems;
}

const failuresList = makeList(result.failure);


const createPerson = (name, age, gender) => {
  // Only change code below this line
  return {
    name,
    age,
    gender
  };
  // Only change code above this line
};

const bicycle = {
  gear: 2,
  setGear(newGear) {
    this.gear = newGear;
  }
};
// Only change code above this line
bicycle.setGear(3);
console.log(bicycle.gear);


// Only change code below this line
class Vegetable {
  constructor(name) {
    this.name = name;
  }
}
// Only change code above this line

const carrot = new Vegetable('carrot');
console.log(carrot.name); // Should display 'carrot'

// Only change code below this line
class Thermostat {
  constructor(fahrenheit) {
    this.fahrenheit= fahrenheit;
}
// getter
  get temperature() {
    return (5/9) * (this.fahrenheit - 32);
  }
  // setter
  set temperature(celsius) {
    this.fahrenheit = celsius * 9.0 / 5 + 32;
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius


<html>
  <body>
    <!-- Only change code below this line -->
    <script type="module" src="index.js"></script>

    <!-- Only change code above this line -->
  </body>
</html>


//////
const uppercaseString = (string) => {
  return string.toUpperCase();
}

const lowercaseString = (string) => {
  return string.toLowerCase()
}

export {uppercaseString};
export {lowercaseString};


////////

import {uppercaseString, lowercaseString } from './string_functions.js'
// Only change code above this line

uppercaseString("hello");
lowercaseString("WORLD!");


//////

export default function subtract(x, y) {
  return x - y;
}



import subtract from './math_functions.js'
// Only change code above this line

subtract(7,4);

////

const makeServerRequest = new Promise((resolve, reject) => {
  
})


const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;
    
  if(responseFromServer) {
    // Change this line
    resolve("We got the data");
  } else {  
    // Change this line
    reject("Data not received");
  }
});


/////const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to true to represent a successful response from a server
  let responseFromServer = true;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
 
  makeServerRequest.then(result => {
    console.log(result)
  })
});


/////
const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);

makeServerRequest.catch(error => {
  console.log(error)
})
});

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line


let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);


let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

Using regex with the test method,matching literal strings with different possiblities


*/