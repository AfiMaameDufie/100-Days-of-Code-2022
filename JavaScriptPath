/*

Comments  : // , /**/

/*
Variables : var afi;
assignment operators : var a = 5 ;
String operators : var myName = "afi";

assignment operators, multi assignment, use of let, var and const

multioperator assignment and ctci

concatenation operator
newline, new tab 
bracket notation
arrays

nested arrays
bracket notation
array manipulation

shift
unshift
lists
functions and scoping

boolean
conditional statements
equality operator

more equality operators
conditional statements

golf code
switch statements

function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
  switch(val) {
  case 1:
  case 2:
  case 3:
    answer = "Low";
    break;
  case 4:
  case 5:
  case 6:
    answer = "Mid";
    break;
  case 7:
  case 8:
  case 9:
    answer = "High";
    break;
  
}


  // Only change code above this line
  return answer;
}

sequentialSizes(1);


function isLess(a, b) {
  // Only change code below this line
  return a < b;
  // Only change code above this line
}

isLess(10, 15);

function abTest(a, b) {
  if (a < 0 | b < 0) {
    return undefined;
  }

  // Only change code below this linee

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);


Counting cards
let count = 0;

function cc(card) {
  // Only change code below this line
  switch (card) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 10:
    case "J":
    case "Q":
    case "K":
    case "A":
      count--;
      break;
  }
  if (count > 0) {
    return count + " Bet";
  } else {
    return count + " Hold";
  }
}


const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

const hatValue = testObj.hat;      
const shirtValue = testObj.shirt;

const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
var entreeValue = testObj["an entree"];   
var drinkValue = testObj["the drink"];  


const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line
myDog.name="Happy Coder";


function phoneticLookup(val) {
  let result = "";

  // Only change code below this line
  var lookup = {
    "alpha" : "Adams",
    "bravo": "Boston",
    "charlie" : "Chicago",
    "delta" : "Denver",
    "echo" : "Easy",
    "foxtrot" : "Frank"
  };

 result = lookup[val];

  return result;
}

phoneticLookup("charlie");


function checkObj(obj, checkProp) {
 if(obj.hasOwnProperty(checkProp)){
    return obj[checkProp];
  }
  else{
return "Not Found";
  }
}

const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1] ;

*/